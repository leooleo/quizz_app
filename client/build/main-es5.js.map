{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/api.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/login-page/login-page.component.ts","webpack:///src/app/login-page/login-page.component.html","webpack:///src/app/login.service.ts","webpack:///src/app/question-maker/question-maker.component.ts","webpack:///src/app/question-maker/question-maker.component.html","webpack:///src/app/question-model.ts","webpack:///src/app/quizz/quizz.component.ts","webpack:///src/app/quizz/quizz.component.html","webpack:///src/app/user-model.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApiService","httpClient","get","serverUrl","user","question","post","createdByUser","providedIn","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","config","url","options","AppModule","declarations","providers","bootstrap","LoginPageComponent","apiService","loginService","router","usersForm","availableUsers","Array","loading","getAvailableUsers","subscribe","data","console","log","selectedUser","loggedUser","hasAnswered","navigate","onSelected","LoginService","QuestionMakerComponent","snackBar","profileForm","required","noWhitespaceValidator","firstAnswer","secondAnswer","thirdAnswer","correctOption","control","isWhitespace","value","trim","length","isValid","validateUser","getUserAnsweredQuestions","formDirective","valid","open","duration","model","createModel","sendQuestion","response","message","resetForm","reset","setValue","userQuestionCount","name","getUserQuestions","questions","undefined","QuestionModel","createdBy","answers","correctAnswer","possibleAnswers","QuizzComponent","socket","initializeEvents","fromEvent","UserModel","score","isLogged","photoUrl","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserModel } from './user-model';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { QuestionModel } from './question-model';\r\nimport { ServerResponse } from './server-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAvailableUsers(): Observable<UserModel[]> {\r\n    return this.httpClient.get<UserModel[]>(`${environment.serverUrl}/api/users`);\r\n  }\r\n\r\n  getUserQuestions(user: string): Observable<QuestionModel[]> {\r\n    return this.httpClient.get<QuestionModel[]>(`${environment.serverUrl}/api/questions/${user}`);\r\n  }\r\n\r\n  sendQuestion(question: QuestionModel): Observable<ServerResponse> {\r\n    return this.httpClient.post<ServerResponse>(`${environment.serverUrl}/api/question/${question.createdByUser}`, question);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginPageComponent } from './login-page/login-page.component';\nimport { QuestionMakerComponent } from './question-maker/question-maker.component';\nimport { QuizzComponent } from './quizz/quizz.component';\n\n\nconst routes: Routes = [\n  { path: '', component: LoginPageComponent },\n  { path: 'login', component: LoginPageComponent },\n  { path: 'question', component: QuestionMakerComponent },\n  { path: 'quizz', component: QuizzComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'quizz-app';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { QuestionMakerComponent } from './question-maker/question-maker.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgxLoadingModule } from 'ngx-loading';\r\nimport { QuizzComponent } from './quizz/quizz.component';\r\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\n\r\nconst config: SocketIoConfig = { url: environment.serverUrl, options: {} };\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginPageComponent,\r\n    QuestionMakerComponent,\r\n    QuizzComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    HttpClientModule,\r\n    NgxLoadingModule,\r\n    SocketIoModule.forRoot(config),\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSnackBarModule,\r\n    MatRadioModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, NgModule } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ApiService } from '../api.service';\r\nimport { UserModel } from '../user-model';\r\nimport { LoginService } from '../login.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.css', '../app.component.css'],\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n  usersForm = new FormControl();\r\n  loading: boolean;\r\n  availableUsers: UserModel[] = new Array<UserModel>();\r\n\r\n  constructor(private apiService: ApiService, private loginService: LoginService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    this.apiService.getAvailableUsers().subscribe((data: UserModel[]) => {\r\n      console.log('receiving');\r\n      console.log(data);\r\n      this.availableUsers = data;\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  onSelected(selectedUser: UserModel) {\r\n    this.loginService.loggedUser = selectedUser;\r\n    if(!selectedUser.hasAnswered) {\r\n      this.router.navigate(['/question']);  \r\n    }\r\n    else {\r\n      this.router.navigate(['/quizz']);\r\n    }    \r\n  }\r\n}\r\n","<div class=\"body\">\r\n    <ngx-loading [show]=\"loading\"></ngx-loading>\r\n    <mat-toolbar color=\"primary\">\r\n        Sa longa quizz\r\n        <span class=\"toolbar-spacer\"></span>\r\n        <mat-icon>person</mat-icon>\r\n    </mat-toolbar>\r\n\r\n    <mat-card class=\"login-card-quizz\">\r\n        <mat-card-header>\r\n            <h1 class=\"center-card-element\" style=\"margin-left: -30px;\">SaLongin</h1>\r\n        </mat-card-header>\r\n        <h3 class=\"center-card-element card-contents\">Qual sa longeiro é você?</h3>\r\n        <form>\r\n            <mat-form-field class=\"center-card-element\">\r\n                <mat-label>Selecione</mat-label>\r\n                <mat-select (valueChange)=\"onSelected($event)\">\r\n                    <mat-option *ngFor=\"let user of availableUsers\" [value]=\"user\">\r\n                        <span><img src={{user.photoUrl}} alt=\"Avatar\" class=\"avatar\"></span> {{user.name}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </form>\r\n    </mat-card>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { UserModel } from './user-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  public loggedUser: UserModel;\r\n  \r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { LoginService } from '../login.service';\r\nimport { UserModel } from '../user-model';\r\nimport { ApiService } from '../api.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, Validators, FormGroup, FormGroupDirective } from '@angular/forms';\r\nimport { QuestionModel } from '../question-model';\r\nimport { ServerResponse } from '../server-response';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  templateUrl: './question-maker.component.html',\r\n  styleUrls: ['./question-maker.component.css', '../app.component.css', '../login-page/login-page.component.css']\r\n})\r\nexport class QuestionMakerComponent implements OnInit {\r\n  user: UserModel;\r\n  loading: boolean;\r\n  userQuestionCount: number;\r\n  currentQuestion: QuestionModel;\r\n  profileForm = new FormGroup({\r\n    question: new FormControl('', [Validators.required, this.noWhitespaceValidator]),\r\n    firstAnswer: new FormControl('', [Validators.required]),\r\n    secondAnswer: new FormControl('', [Validators.required]),\r\n    thirdAnswer: new FormControl('', [Validators.required]),\r\n    correctOption: new FormControl('1'),\r\n  });\r\n\r\n  constructor(private loginService: LoginService, private apiService: ApiService, private router: Router, private snackBar: MatSnackBar) { }\r\n\r\n  noWhitespaceValidator(control: FormControl) {\r\n    const isWhitespace = (control.value || '').trim().length === 0;\r\n    const isValid = !isWhitespace;\r\n    return isValid ? null : { 'whitespace': true };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.loginService.loggedUser;\r\n    this.validateUser();\r\n    this.getUserAnsweredQuestions();\r\n  }\r\n\r\n  onSubmit(formDirective: FormGroupDirective) {\r\n    if (!this.profileForm.valid) {\r\n      this.snackBar.open('É necessário preencher todos os campos', 'Ok', { duration: 3000 });\r\n      return;\r\n    };\r\n\r\n    var model = this.createModel();\r\n\r\n    this.loading = true;\r\n    this.apiService.sendQuestion(model).subscribe((response: ServerResponse) => {\r\n      this.loading = false;\r\n      if (response.message == 'ok') {\r\n        this.snackBar.open('Pergunta registrada!', 'Ok', { duration: 3000 });\r\n        formDirective.resetForm();\r\n        this.profileForm.reset();\r\n        this.profileForm.get('correctOption').setValue('1');\r\n        this.userQuestionCount += 1;\r\n      }\r\n      else {\r\n        this.snackBar.open('Erro desconhecido ' + response.message, 'Ok', { duration: 3000 })\r\n      }\r\n    });\r\n  }\r\n\r\n  private createModel(): QuestionModel {\r\n    return new QuestionModel(\r\n      this.profileForm.value.question,\r\n      this.user.name,\r\n      [\r\n        this.profileForm.value.firstAnswer,\r\n        this.profileForm.value.secondAnswer,\r\n        this.profileForm.value.thirdAnswer\r\n      ],\r\n      this.profileForm.value.correctOption\r\n    );\r\n  }\r\n\r\n  private getUserAnsweredQuestions() {\r\n    this.loading = true;\r\n    this.apiService.getUserQuestions(this.user.name).subscribe((questions) => {\r\n      this.userQuestionCount = questions.length;\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  private validateUser() {\r\n    if (this.user == undefined) {\r\n      // TODO: Remove this mock!\r\n      this.user = new UserModel('Bonfa', 0, false, false);\r\n      // this.router.navigate(['/login']);\r\n    }\r\n    else if (this.user.hasAnswered) {\r\n      this.router.navigate(['/quizz']);\r\n    }\r\n  }\r\n\r\n  routeToQuizz() {\r\n    this.loginService.loggedUser = this.user;\r\n    this.router.navigate(['/quizz']);\r\n  }\r\n}\r\n","<ngx-loading [show]=\"loading\"></ngx-loading>\r\n<div *ngIf=\"user != undefined && userQuestionCount != undefined\" class=\"body\">\r\n    <mat-toolbar color=\"primary\">\r\n        Sa longa quizz\r\n        <span class=\"toolbar-spacer\"></span>\r\n        <div>{{user.name}}</div>\r\n        <img src={{user.photoUrl}} class=\"avatar avatar-marging\">\r\n    </mat-toolbar>\r\n    <mat-card class=\"question-card-quizz\" style=\"text-align: center;\">\r\n\r\n        <mat-card-title>\r\n            <h2>Pergunta </h2>\r\n        </mat-card-title>\r\n        <h3>Faça uma pergunta e dê três opções</h3>\r\n        <form [formGroup]=\"profileForm\" #formDirective=\"ngForm\">\r\n            <mat-form-field>\r\n                <mat-label>Pergunta</mat-label>\r\n                <input matInput formControlName=\"question\" placeholder=\"Ex. Qual meu nome?\">\r\n            </mat-form-field>\r\n            <br>\r\n\r\n            <mat-form-field>\r\n                <mat-label>Primeira resposta</mat-label>\r\n                <input matInput formControlName=\"firstAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <mat-label>Segunda resposta</mat-label>\r\n                <input matInput formControlName=\"secondAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <mat-label>Terceira resposta</mat-label>\r\n                <input matInput formControlName=\"thirdAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <br>\r\n            <mat-label class=\"radio-group\"><h4>Selecione a opção correta</h4></mat-label>            \r\n            <div >\r\n                <mat-radio-group formControlName=\"correctOption\">\r\n                    <mat-radio-button value=\"1\" class=\"radio-question\">Opção 1</mat-radio-button>\r\n                    <mat-radio-button value=\"2\" class=\"radio-question\">Opção 2</mat-radio-button>\r\n                    <mat-radio-button value=\"3\" class=\"radio-question\">Opção 3</mat-radio-button>\r\n                </mat-radio-group>\r\n            </div>            \r\n            <br>\r\n            <button mat-raised-button color=\"accent\" (click)=\"onSubmit(formDirective)\">Enviar</button>\r\n        </form>\r\n        <mat-card-footer>\r\n            <div *ngIf=\"userQuestionCount < 3;else goToQuizz\">\r\n                <h5>{{3 - userQuestionCount}} pergunta(s) faltando</h5>\r\n            </div>\r\n            <ng-template #goToQuizz >\r\n                <br>\r\n                <button mat-raised-button color=\"accent\" (click)=\"routeToQuizz()\">Ir para o quizz</button>\r\n            </ng-template>\r\n            \r\n        </mat-card-footer>\r\n    </mat-card>\r\n</div>","export class QuestionModel {\r\n    question: string;\r\n    createdByUser: string\r\n    possibleAnswers: Array<string>;\r\n    correctAnswer: string;\r\n\r\n    constructor(question: string, createdBy: string, answers: Array<string>, correctAnswer: string) {\r\n        this.question = question;\r\n        this.createdByUser = createdBy;\r\n        this.possibleAnswers = answers;\r\n        this.correctAnswer = correctAnswer;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Socket } from 'ngx-socket-io';\r\nimport { LoginService } from '../login.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserModel } from '../user-model';\r\n\r\n@Component({\r\n  templateUrl: './quizz.component.html',\r\n  styleUrls: ['./quizz.component.css']\r\n})\r\nexport class QuizzComponent implements OnInit {\r\n  user: UserModel;\r\n  constructor(private socket: Socket, private loginService: LoginService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.loginService.loggedUser;\r\n    this.validateUser();\r\n    this.initializeEvents();\r\n  }\r\n\r\n  private validateUser() {\r\n    if (this.user == undefined) {\r\n      if (this.user == undefined) {\r\n        this.router.navigate(['/login']);\r\n      }\r\n      else if (this.user.hasAnswered) {\r\n        this.router.navigate(['/question']);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEvents() {\r\n    this.socket.fromEvent(\"message\").subscribe((data: string) => {\r\n      console.log('[WSS] ' + data)\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","<p>quizz works!</p>\n","export class UserModel {\r\n    name: string;\r\n    score: number;\r\n    hasAnswered: boolean;\r\n    isLogged: boolean;\r\n    photoUrl: string;\r\n\r\n    constructor(name: string, score: number, hasAnswered: boolean, isLogged: boolean) {\r\n        this.name = name;\r\n        this.score = score;\r\n        this.hasAnswered = hasAnswered;\r\n        this.isLogged = isLogged;\r\n        this.photoUrl = `http://localhost:8080/api/photo/${name}`;\r\n    }    \r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  // serverUrl: 'http://localhost:8080'\r\n  serverUrl: 'https://salongaquizz.herokuapp.com'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}