{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/answer-model.ts","webpack:///src/app/api.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/login-page/login-page.component.ts","webpack:///src/app/login-page/login-page.component.html","webpack:///src/app/login-warning-dialog/login-warning-dialog.component.ts","webpack:///src/app/login-warning-dialog/login-warning-dialog.component.html","webpack:///src/app/login.service.ts","webpack:///src/app/question-maker/question-maker.component.ts","webpack:///src/app/question-maker/question-maker.component.html","webpack:///src/app/question-model.ts","webpack:///src/app/quizz/quizz.component.ts","webpack:///src/app/quizz/quizz.component.html","webpack:///src/app/round-end-dialog/round-end-dialog.component.ts","webpack:///src/app/round-end-dialog/round-end-dialog.component.html","webpack:///src/app/score-model.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AnswerModel","userName","answer","ApiService","httpClient","get","serverUrl","user","question","post","createdByUser","providedIn","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","config","url","options","AppModule","declarations","providers","bootstrap","LoginPageComponent","apiService","loginService","router","dialog","usersForm","availableUsers","Array","loading","getAvailableUsers","subscribe","data","console","log","checkForStoredUser","getStoredUser","undefined","openWarningDialog","dialogRef","open","afterClosed","shouldRedirect","navigateToNextRoute","selectedUser","storeUser","hasAnswered","navigate","onSelected","LoginWarningDialogComponent","LoginService","localStorage","setItem","JSON","stringify","st","parse","getItem","QuestionMakerComponent","snackBar","profileForm","required","noWhitespaceValidator","firstAnswer","secondAnswer","thirdAnswer","correctOption","control","isWhitespace","value","trim","length","isValid","validateUser","getUserAnsweredQuestions","formDirective","valid","duration","model","createModel","sendQuestion","response","message","resetForm","reset","setValue","userQuestionCount","name","getUserQuestions","questions","QuestionModel","createdBy","answers","correctAnswer","possibleAnswers","QuizzComponent","socket","spinnerMode","spinnerColor","connect","initializeEvents","loadUsers","loadingUsers","users","disconnect","answerIndex","currentQuestion","indexOf","answerModel","toString","buttonsAreEnabled","sendAnswer","emit","fromEvent","watingForUsers","waitingMessage","closeAll","proportionalTimeLeft","score","winnners","map","getUserOfQuestionPhoto","loosers","winners","quizzWinners","RoundEndDialogComponent","ScoreModel","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export class AnswerModel {\n    userName: string;\n    answer: string;\n\n    constructor(userName: string, answer: string) {\n        this.userName = userName;\n        this.answer = answer;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserModel } from './user-model';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { QuestionModel } from './question-model';\r\nimport { ServerResponse } from './server-response';\r\nimport { AnswerModel } from './answer-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAvailableUsers(): Observable<UserModel[]> {\r\n    return this.httpClient.get<UserModel[]>(`${environment.serverUrl}/api/users`);\r\n  }\r\n\r\n  getUserQuestions(user: string): Observable<QuestionModel[]> {\r\n    return this.httpClient.get<QuestionModel[]>(`${environment.serverUrl}/api/questions/${user}`);\r\n  }\r\n\r\n  sendQuestion(question: QuestionModel): Observable<ServerResponse> {\r\n    return this.httpClient.post<ServerResponse>(`${environment.serverUrl}/api/question/${question.createdByUser}`, question);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginPageComponent } from './login-page/login-page.component';\nimport { QuestionMakerComponent } from './question-maker/question-maker.component';\nimport { QuizzComponent } from './quizz/quizz.component';\n\n\nconst routes: Routes = [\n  { path: '', component: LoginPageComponent },\n  { path: 'login', component: LoginPageComponent },\n  { path: 'question', component: QuestionMakerComponent },\n  { path: 'quizz', component: QuizzComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'quizz-app';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { QuestionMakerComponent } from './question-maker/question-maker.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgxLoadingModule } from 'ngx-loading';\r\nimport { QuizzComponent } from './quizz/quizz.component';\r\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { LoginWarningDialogComponent } from './login-warning-dialog/login-warning-dialog.component';\nimport { RoundEndDialogComponent } from './round-end-dialog/round-end-dialog.component';\r\n\r\nconst config: SocketIoConfig = { url: environment.serverUrl, options: {} };\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginPageComponent,\r\n    QuestionMakerComponent,\r\n    QuizzComponent,\r\n    LoginWarningDialogComponent,\r\n    RoundEndDialogComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    HttpClientModule,\r\n    NgxLoadingModule,\r\n    SocketIoModule.forRoot(config),\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSnackBarModule,\r\n    MatRadioModule,\r\n    MatSidenavModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, NgModule } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ApiService } from '../api.service';\r\nimport { UserModel } from '../user-model';\r\nimport { LoginService } from '../login.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LoginWarningDialogComponent } from '../login-warning-dialog/login-warning-dialog.component';\r\n\r\n@Component({\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.css', '../app.component.css'],\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n  usersForm = new FormControl();\r\n  loading: boolean;\r\n  availableUsers: UserModel[] = new Array<UserModel>();\r\n  user: UserModel;\r\n\r\n  constructor(private apiService: ApiService, private loginService: LoginService, private router: Router, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    this.apiService.getAvailableUsers().subscribe((data: UserModel[]) => {\r\n      console.log('receiving');\r\n      console.log(data);\r\n      this.availableUsers = data;\r\n      this.loading = false;\r\n    });\r\n    this.checkForStoredUser();\r\n  }\r\n\r\n  private checkForStoredUser() {\r\n    this.user = this.loginService.getStoredUser();\r\n    if (this.user != undefined) {\r\n      this.openWarningDialog();\r\n    }\r\n  }\r\n\r\n  private openWarningDialog() {\r\n    var dialogRef = this.dialog.open(LoginWarningDialogComponent);\r\n    dialogRef.afterClosed().subscribe((shouldRedirect: boolean) => {\r\n      if (shouldRedirect) {\r\n        this.navigateToNextRoute();\r\n      }\r\n    });\r\n  }\r\n\r\n  onSelected(selectedUser: UserModel) {\r\n    this.user = selectedUser;\r\n    this.loginService.storeUser(selectedUser);\r\n    this.navigateToNextRoute();\r\n  }\r\n\r\n  private navigateToNextRoute() {\r\n    if (!this.user.hasAnswered) {\r\n      this.router.navigate(['/question']);\r\n    }\r\n    else {\r\n      this.router.navigate(['/quizz']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"body\">\r\n    <ngx-loading [show]=\"loading\"></ngx-loading>\r\n    <mat-toolbar color=\"primary\">\r\n        Sa longa quizz\r\n        <span class=\"toolbar-spacer\"></span>\r\n        <mat-icon>person</mat-icon>\r\n    </mat-toolbar>\r\n\r\n    <mat-card class=\"login-card-quizz\">\r\n        <mat-card-header>\r\n            <h1 class=\"center-card-element\" style=\"margin-left: -30px;\">SaLongin</h1>\r\n        </mat-card-header>\r\n        <h3 class=\"center-card-element card-contents\">Qual sa longeiro é você?</h3>\r\n        <form>\r\n            <mat-form-field class=\"center-card-element\">\r\n                <mat-label>Selecione</mat-label>\r\n                <mat-select (valueChange)=\"onSelected($event)\">\r\n                    <mat-option *ngFor=\"let user of availableUsers\" [value]=\"user\">\r\n                        <span><img src={{user.photoUrl}} alt=\"Avatar\" class=\"avatar\"></span> {{user.name}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </form>\r\n    </mat-card>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { UserModel } from '../user-model';\n\n@Component({\n  selector: 'app-login-warning-dialog',\n  templateUrl: './login-warning-dialog.component.html',\n  styleUrls: ['./login-warning-dialog.component.css']\n})\nexport class LoginWarningDialogComponent implements OnInit {\n  user: UserModel;\n  constructor(private loginService: LoginService) { }\n\n  ngOnInit(): void {\n    this.user = this.loginService.getStoredUser();\n  }\n\n}\n","<h1 mat-dialog-title>Aviso</h1>\n<div mat-dialog-content>\n  <p>Você já está logado(a) como '{{user.name}}'</p>\n  <p>Realmente deseja trocar de usuário?</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button cdkFocusInitial [mat-dialog-close]=\"true\" color=\"primary\">Não</button>\n  <button mat-button [mat-dialog-close]=\"false\" color=\"warn\">Sim</button>\n</div>","import { Injectable } from '@angular/core';\r\nimport { UserModel } from './user-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  constructor() { }\r\n\r\n  storeUser(user: UserModel) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    var st = JSON.parse(localStorage.getItem('user'));\r\n    console.log('Storing user:');\r\n    console.log(st);\r\n  }\r\n\r\n  getStoredUser(): UserModel {\r\n    var user = JSON.parse(localStorage.getItem('user'));\r\n    console.log('Getting user:');\r\n    console.log(user);\r\n    return user;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { LoginService } from '../login.service';\r\nimport { UserModel } from '../user-model';\r\nimport { ApiService } from '../api.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, Validators, FormGroup, FormGroupDirective } from '@angular/forms';\r\nimport { QuestionModel } from '../question-model';\r\nimport { ServerResponse } from '../server-response';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  templateUrl: './question-maker.component.html',\r\n  styleUrls: ['./question-maker.component.css', '../app.component.css', '../login-page/login-page.component.css']\r\n})\r\nexport class QuestionMakerComponent implements OnInit {\r\n  user: UserModel;\r\n  loading: boolean;\r\n  userQuestionCount: number;\r\n  currentQuestion: QuestionModel;\r\n  profileForm = new FormGroup({\r\n    question: new FormControl('', [Validators.required, this.noWhitespaceValidator]),\r\n    firstAnswer: new FormControl('', [Validators.required]),\r\n    secondAnswer: new FormControl('', [Validators.required]),\r\n    thirdAnswer: new FormControl('', [Validators.required]),\r\n    correctOption: new FormControl('1'),\r\n  });\r\n\r\n  constructor(private loginService: LoginService, private apiService: ApiService, private router: Router, private snackBar: MatSnackBar) { }\r\n\r\n  noWhitespaceValidator(control: FormControl) {\r\n    const isWhitespace = (control.value || '').trim().length === 0;\r\n    const isValid = !isWhitespace;\r\n    return isValid ? null : { 'whitespace': true };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.loginService.getStoredUser();\r\n    this.validateUser();\r\n    this.getUserAnsweredQuestions();\r\n  }\r\n\r\n  onSubmit(formDirective: FormGroupDirective) {\r\n    if (!this.profileForm.valid) {\r\n      this.snackBar.open('É necessário preencher todos os campos', 'Ok', { duration: 3000 });\r\n      return;\r\n    };\r\n\r\n    var model = this.createModel();\r\n\r\n    this.loading = true;\r\n    this.apiService.sendQuestion(model).subscribe((response: ServerResponse) => {\r\n      this.loading = false;\r\n      if (response.message == 'ok') {\r\n        this.snackBar.open('Pergunta registrada!', 'Ok', { duration: 3000 });\r\n        formDirective.resetForm();\r\n        this.profileForm.reset();\r\n        this.profileForm.get('correctOption').setValue('1');\r\n        this.userQuestionCount += 1;\r\n      }\r\n      else {\r\n        this.snackBar.open('Erro desconhecido ' + response.message, 'Ok', { duration: 3000 })\r\n      }\r\n    });\r\n  }\r\n\r\n  private createModel(): QuestionModel {\r\n    return new QuestionModel(\r\n      this.profileForm.value.question,\r\n      this.user.name,\r\n      [\r\n        this.profileForm.value.firstAnswer,\r\n        this.profileForm.value.secondAnswer,\r\n        this.profileForm.value.thirdAnswer\r\n      ],\r\n      this.profileForm.value.correctOption\r\n    );\r\n  }\r\n\r\n  private getUserAnsweredQuestions() {\r\n    this.loading = true;\r\n    this.apiService.getUserQuestions(this.user.name).subscribe((questions) => {\r\n      this.userQuestionCount = questions.length;\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  private validateUser() {\r\n    if (this.user == undefined) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n    else if (this.user.hasAnswered) {\r\n      this.router.navigate(['/quizz']);\r\n    }\r\n  }\r\n\r\n  routeToQuizz() {\r\n    this.router.navigate(['/quizz']);\r\n  }\r\n}\r\n","<ngx-loading [show]=\"loading\"></ngx-loading>\r\n<div *ngIf=\"user != undefined && userQuestionCount != undefined\" class=\"body\">\r\n    <mat-toolbar color=\"primary\">\r\n        Sa longa quizz\r\n        <span class=\"toolbar-spacer\"></span>\r\n        <div>{{user.name}}</div>\r\n        <img src={{user.photoUrl}} class=\"avatar avatar-marging\">\r\n    </mat-toolbar>\r\n    <mat-card class=\"question-card-quizz\" style=\"text-align: center;\">\r\n        <mat-card-title>\r\n            <h2>Pergunta </h2>\r\n        </mat-card-title>\r\n        <h3>Faça uma pergunta e dê três opções</h3>\r\n        <form [formGroup]=\"profileForm\" #formDirective=\"ngForm\">\r\n            <mat-form-field>\r\n                <mat-label>Pergunta</mat-label>\r\n                <input matInput formControlName=\"question\" placeholder=\"Ex. Qual meu nome?\">\r\n            </mat-form-field>\r\n            <br>\r\n\r\n            <mat-form-field>\r\n                <mat-label>Primeira resposta</mat-label>\r\n                <input matInput formControlName=\"firstAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <mat-label>Segunda resposta</mat-label>\r\n                <input matInput formControlName=\"secondAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <mat-label>Terceira resposta</mat-label>\r\n                <input matInput formControlName=\"thirdAnswer\" placeholder=\"Ex. Méo loraes\">\r\n            </mat-form-field>\r\n            <br>\r\n            <br>\r\n            <mat-label class=\"radio-group\">\r\n                <h4>Selecione a opção correta</h4>\r\n            </mat-label>\r\n            <div>\r\n                <mat-radio-group formControlName=\"correctOption\">\r\n                    <mat-radio-button value=\"1\" class=\"radio-question\">Opção 1</mat-radio-button>\r\n                    <mat-radio-button value=\"2\" class=\"radio-question\">Opção 2</mat-radio-button>\r\n                    <mat-radio-button value=\"3\" class=\"radio-question\">Opção 3</mat-radio-button>\r\n                </mat-radio-group>\r\n            </div>\r\n            <br>\r\n            <button mat-raised-button color=\"accent\" (click)=\"onSubmit(formDirective)\">Enviar</button>\r\n        </form>\r\n        <mat-card-footer>\r\n            <div *ngIf=\"userQuestionCount < 3;else goToQuizz\">\r\n                <h5>{{3 - userQuestionCount}} pergunta(s) faltando</h5>\r\n                <br>\r\n                <br>\r\n            </div>\r\n            <ng-template #goToQuizz>\r\n                <br>\r\n                <button mat-raised-button color=\"accent\" (click)=\"routeToQuizz()\">Ir para o quizz</button>\r\n                <br>\r\n                <br>\r\n            </ng-template>\r\n\r\n        </mat-card-footer>\r\n    </mat-card>\r\n</div>","export class QuestionModel {\r\n    question: string;\r\n    createdByUser: string\r\n    possibleAnswers: Array<string>;\r\n    correctAnswer: string;\r\n\r\n    constructor(question: string, createdBy: string, answers: Array<string>, correctAnswer: string) {\r\n        this.question = question;\r\n        this.createdByUser = createdBy;\r\n        this.possibleAnswers = answers;\r\n        this.correctAnswer = correctAnswer;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Socket } from 'ngx-socket-io';\r\nimport { LoginService } from '../login.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserModel } from '../user-model';\r\nimport { QuestionQuizzModel } from '../question-quizz-model';\r\nimport { ApiService } from '../api.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ScoreModel } from '../score-model';\r\nimport { AnswerModel } from '../answer-model';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { RoundEndDialogComponent } from '../round-end-dialog/round-end-dialog.component';\r\n\r\n@Component({\r\n  templateUrl: './quizz.component.html',\r\n  styleUrls: ['./quizz.component.css', '../question-maker/question-maker.component.css', '../app.component.css',]\r\n})\r\nexport class QuizzComponent implements OnInit {\r\n  user: UserModel;\r\n  watingForUsers: boolean;\r\n  waitingMessage: string;\r\n  loading: boolean;\r\n  loadingUsers: boolean;\r\n  currentQuestion: QuestionQuizzModel;\r\n  proportionalTimeLeft: number;\r\n  users: UserModel[];\r\n  spinnerMode: ProgressSpinnerMode = \"determinate\";\r\n  spinnerColor: ThemePalette = 'primary';\r\n  buttonsAreEnabled: boolean;\r\n  quizzWinners: Array<UserModel>;\r\n\r\n  constructor(private socket: Socket, private loginService: LoginService,\r\n    private router: Router, private apiService: ApiService, private snackBar: MatSnackBar, private dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.loginService.getStoredUser();\r\n    this.socket.connect();\r\n    this.loading = true;\r\n    this.validateUser();\r\n    this.initializeEvents();\r\n    this.loadUsers();\r\n  }\r\n\r\n  private loadUsers() {\r\n    this.loadingUsers = true;\r\n    this.apiService.getAvailableUsers().subscribe((data: UserModel[]) => {\r\n      this.users = data;\r\n      this.loadingUsers = false;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.socket.disconnect();\r\n  }\r\n\r\n  private validateUser() {\r\n    if (this.user == undefined) {\r\n      if (this.user == undefined) {\r\n        this.router.navigate(['/login']);\r\n      }\r\n      else if (!this.user.hasAnswered) {\r\n        this.router.navigate(['/question']);\r\n      }\r\n    }\r\n  }\r\n\r\n  getUserOfQuestionPhoto(userName: string): string {\r\n    return `${environment.serverUrl}/api/photo/${userName}`;\r\n  }\r\n\r\n  onAnswer(answer: string) {\r\n    var answerIndex = this.currentQuestion.possibleAnswers.indexOf(answer) + 1;\r\n    var answerModel = new AnswerModel(this.user.name, answerIndex.toString());\r\n    this.buttonsAreEnabled = false;\r\n    this.sendAnswer(answerModel);\r\n    this.snackBar.open('Resposta enviada com sucesso', 'Ok', { duration: 3000 });\r\n  }\r\n\r\n  private sendAnswer(answer: AnswerModel) {\r\n    this.socket.emit('answer', answer);\r\n  }\r\n\r\n  private initializeEvents() {\r\n    this.socket.fromEvent('waiting').subscribe((data: string) => {\r\n      this.loading = false;\r\n      this.watingForUsers = true;\r\n      console.log('Waiting ' + data);\r\n      this.waitingMessage = data;\r\n    });\r\n\r\n    this.socket.fromEvent('currentQuestion').subscribe((data: QuestionQuizzModel) => {\r\n      this.dialog.closeAll();\r\n      this.watingForUsers = false;\r\n      this.loading = false;\r\n      this.buttonsAreEnabled = true;\r\n      this.spinnerColor = 'primary';\r\n      console.log('Current question');\r\n      console.log(data);\r\n      this.currentQuestion = data;\r\n    });\r\n\r\n    this.socket.fromEvent('timer').subscribe((data: number) => {\r\n      this.proportionalTimeLeft = data;\r\n      if (data <= 45) {\r\n        this.spinnerColor = 'warn';\r\n      }\r\n      if (data == 0) {\r\n        this.buttonsAreEnabled = false;\r\n      }\r\n    });\r\n\r\n    this.socket.fromEvent('score').subscribe((score: ScoreModel) => {\r\n      this.users = score.users;\r\n\r\n      score.winnners = score.winnners.map((user) => this.getUserOfQuestionPhoto(user));\r\n      score.loosers = score.loosers.map((user) => this.getUserOfQuestionPhoto(user));\r\n      this.dialog.open(RoundEndDialogComponent, { data: score });\r\n    });\r\n\r\n    this.socket.fromEvent('winner').subscribe((winners: Array<UserModel>) => {\r\n      this.quizzWinners = winners;\r\n    });\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\n    Sa longa quizz\n    <span class=\"toolbar-spacer\"></span>\n    <div>{{user.name}}</div>\n    <img src={{user.photoUrl}} class=\"avatar avatar-marging\">\n</mat-toolbar>\n<mat-sidenav-container>\n    <mat-sidenav mode=\"side\" opened>\n        <ngx-loading [show]=\"loadingUsers\"></ngx-loading>\n        <h2 style=\"color: white; font-weight: normal;\">Placar</h2>\n        <div *ngFor=\"let user of users\">\n            <h4 style=\"color: white; font-weight: normal;\">\n                <img src={{user.photoUrl}} class=\"avatar avatar-marging\">\n                {{user.name}}: {{user.score}}\n            </h4>\n\n        </div>\n    </mat-sidenav>\n    <mat-sidenav-content style=\"background-color: #e8e8e8;\">\n        <div *ngIf=\"quizzWinners != undefined; else OnGoingQuizz\">\n            <div *ngIf=\"quizzWinners.length == 1;\">\n                <mat-card style=\"text-align: center;\">\n                    <mat-card-title>\n                        Vencedor: {{quizzWinners[0].name}}\n                    </mat-card-title>\n                    <mat-card-content>\n                        <img src=\"{{quizzWinners[0].photoUrl}}\" class=\"winner-image border-circular\">\n                    </mat-card-content>\n                </mat-card>\n            </div>\n            <div *ngIf=\"quizzWinners.length > 1;\">\n                <mat-card style=\"text-align: center;\">\n                    <mat-card-title>\n                        Vencedores: <span *ngFor=\"let user of quizzWinners\"\n                            style=\"margin-right: 10px;\">{{user.name}}</span>\n                    </mat-card-title>\n                    <mat-card-content>\n                        <mat-grid-list cols=\"2\" rowHeight=\"2:1\">\n                            <mat-grid-tile *ngFor=\"let user of quizzWinners\">\n                                <img src=\"{{user.photoUrl}}\">\n                            </mat-grid-tile>\n                        </mat-grid-list>\n                    </mat-card-content>\n                </mat-card>\n            </div>\n        </div>\n        <ng-template #OnGoingQuizz>\n            <mat-card class=\"quizz-card\" style=\"text-align: center;\">\n                <ngx-loading [show]=\"loading\"></ngx-loading>\n                <div *ngIf=\"watingForUsers\">\n                    <mat-card-title>\n                        <h4>{{waitingMessage}}</h4>\n                    </mat-card-title>\n                </div>\n                <div *ngIf=\"currentQuestion != undefined\">\n                    <mat-card-title>\n                        <h3>{{currentQuestion.question}}</h3>\n                    </mat-card-title>\n                    <div *ngFor=\"let possibleAnswer of currentQuestion.possibleAnswers\">\n                        <button mat-flat-button color=\"accent\" [disabled]=\"!buttonsAreEnabled\"\n                            (click)=\"onAnswer(possibleAnswer)\">\n                            {{possibleAnswer}}\n                        </button>\n                        <br>\n                        <br>\n                    </div>\n                    <mat-card-footer>\n                        <mat-grid-list cols=\"2\" rowHeight=\"200px\">\n                            <mat-grid-tile>\n                                <div style=\"text-align: left;\">\n                                    <mat-progress-spinner [mode]=\"spinnerMode\" diameter=\"60\" [color]=\"spinnerColor\"\n                                        [value]=\"proportionalTimeLeft\"></mat-progress-spinner>\n                                </div>\n                            </mat-grid-tile>\n                            <mat-grid-tile>\n                                <div style=\"text-align: left;\">\n                                    <img src=\"{{getUserOfQuestionPhoto(currentQuestion.createdByUser)}}\"\n                                        class=\"created-user-photo\">\n                                </div>\n                            </mat-grid-tile>\n                        </mat-grid-list>\n                    </mat-card-footer>\n                </div>\n            </mat-card>\n        </ng-template>\n    </mat-sidenav-content>\n</mat-sidenav-container>","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ScoreModel } from '../score-model';\n\n@Component({\n  selector: 'app-round-end-dialog',\n  templateUrl: './round-end-dialog.component.html',\n  styleUrls: ['./round-end-dialog.component.css', '../app.component.css']\n})\nexport class RoundEndDialogComponent implements OnInit {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ScoreModel) { }\n\n  ngOnInit(): void {\n    console.log('data');\n    console.log(this.data);\n  }\n\n}\n","<h1 mat-dialog-title>Resultado da rodada</h1>\n<div mat-dialog-content>\n    <p>Vencedores: <span *ngFor=\"let winner of data.winnners\"><img src=\"{{winner}}\" class=\"avatar\"></span></p>\n    <p>Perdedores: <span *ngFor=\"let looser of data.loosers\"><img src=\"{{looser}}\" class=\"avatar\"></span></p>\n</div>\n<div mat-dialog-actions>\n    <button mat-button cdkFocusInitial mat-dialog-close color=\"primary\">Fechar</button>\n</div>","import { UserModel } from './user-model';\n\nexport class ScoreModel {\n    users: Array<UserModel>;\n    winnners: Array<string>;\n    loosers: Array<string>;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  // serverUrl: 'http://localhost:8080'\r\n  serverUrl: 'https://salongaquizz.herokuapp.com'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}